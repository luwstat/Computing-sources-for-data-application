#data cleaning
D <- read.table(file = "F:/bcos.txt", sep = "\t" ,header = TRUE)

library(dplyr)
library(splines)
library(HI)

#function to generate 0 truncated poisson
rztp <- function(n,lambda){
  #Define potential grids
  gs <- seq(1,100)
  #cdf of 0 truncated poisson distribution
  cp <- unique(round(cumsum(c(0,dpois(gs,lambda)/(1-exp(-lambda)))),7))
  #generate u from uniform(0,1)
  u <- runif(n)
  #locate u in the cdf
  x <- findInterval(u,cp,left.open = T)
  return(x)
}

#define the beta function
beta_fun <- function(x,j,X,beta,w,z,bsl1,bsl2,phi,sig0){
  beta[j] <- x
  y <- x* X[,j] %*%(z + w) - t(exp(X%*%beta))%*%(ifelse(d_1 == 1, bsl1, bsl2)*phi) - x^2/(2*sig0^2)
  return(y)
}
#indicator function used in arms
ind_fun <- function(x,j,X,beta,w,z,bsl1,bsl2,phi,sig0) (x>-3)*(x<3)

a_eta = 0.01
b_eta = 0.01
#function for generating a
indaf <- function(x,eta,dfs,sM,lmd) (x>0)*(x<3)
af <- function(x,eta,dfs,sM,lmd){
  x*eta*sM*log(eta) - sum(log( gamma(x*eta*dfs))) + sum( (x*eta*dfs - 1)*log(lmd) ) + (a_eta - 1)*log(x) - b_eta*x
}
#function for generating eta
indetaf <- function(x,a,dfs,sM,lmd) (x>0)*(x<25)
etaf <- function(x,a,dfs,sM,lmd){
  x*a*sM*log(x) - sum(log( gamma( a*dfs*x ) ) ) + sum( (a*x*dfs - 1)*log(lmd) ) - x*sum(lmd) + (a_eta - 1)*log(x) - b_eta*x
}


####################Read data set and change setting here####################
burnin <- 3000
################## Gibbs Sampler ##############################
n <- nrow(D)
t1 <- rep(0,n)
t2 <- rep(Inf,n)
bsl1 <- rep(0,n)
bsl2 <- rep(Inf,n)

#iv is the X's
X <- as.matrix(as.numeric(D[,3] == "RadChem"))
P <- ncol(X)
#del is delta
d_1 <- as.numeric(D[,1] == 0)
d_3 <- as.numeric(D[,2] == Inf)
d_2 <- rep(1,n) - (d_1+d_3)

#construct t1 and t2
t1[d_1 ==1] <- D[d_1 ==1,"right"]
t1[d_2 ==1] <- D[d_2 ==1,"left"]
t2[d_2 ==1] <- D[d_2 ==1,"right"]
t2[d_3 ==1] <- D[d_3 ==1,"left"]
inter <- as.matrix(cbind(t1,t2))

#get trunbull interval bounds
s <- unique(c(0,as.vector(inter)))
M <- length(s)
s <- s[order(s)]

#find k_ij's
k <- NULL

for (indiv in 1:n) {
  krow <- t ( findInterval(inter[indiv,],s ,left.open = T) )
  k <- rbind(k, krow)
}

Ki1 <- k[,1]
Ki2 <- k[,2]

#initial v,a,eta,phi
a <- 1
eta <- 5
phi <- rep(1,n)

Z <- matrix(rep(0, n*M), n, M)
z <- rep(0,n)
W <- matrix(rep(0, n*M), n, M)
w <- rep(0,n)
#prob used to sample z(il) w(il)
p <- matrix(NA,n,M)
#lambda used to sample zi and wi
lambda <- rep(NA,n)
#each jump
lmd <- rep(1,(M-1))
#initial beta
bt <- matrix(rep(0,ncol(X)),ncol(X),1)

##########################
#start sampling
###################################

ite <- 0
tracking <- matrix(rep(NA,10000*(length(bt)+ M + 1)),10000,(length(bt)+ M +1))


while (ite < 10000) {
  #sample Z and W
  #step 1
  #p is 200*12 matrix
  for (indiv in 1:n) {
    if (d_1[indiv] == 1) {
      bsl1[indiv] <- sum(lmd[1:Ki1[indiv]])
      p[indiv,1:Ki1[indiv]] <- lmd[1:Ki1[indiv]]/bsl1[indiv]
      
    } else if (d_2[indiv] == 1){
      bsl1[indiv] <- sum(lmd[1:Ki1[indiv]])
      bsl2[indiv] <- sum(lmd[1:Ki2[indiv]])
      p[indiv,(Ki1[indiv]+1):Ki2[indiv]] <- lmd[(Ki1[indiv]+1):Ki2[indiv]]/sum(lmd[(Ki1[indiv]+1):Ki2[indiv]])
    } else {bsl2[indiv] <- sum(lmd[1:Ki2[indiv]])}
    
  }
  
  #lambda for left and interval censored
  lambda[d_1==1] <- bsl1[d_1 ==1]*as.vector(exp(X[d_1==1,]%*%bt)*phi[d_1==1])
  lambda[d_2==1] <- (bsl2 - bsl1)[d_2 ==1]*as.vector(exp(X[d_2==1,]%*%bt)*phi[d_2==1])
  for (indiv in which(d_1 == 1)) {
    z[indiv] <- rztp(1,lambda[indiv])
  }
  
  for (indiv in which(d_2 == 1)) {
    w[indiv] <- rztp(1,lambda[indiv])
  }
  
  
  for(indiv in 1:n){
    if(d_1[indiv] == 1){
      Z[indiv,1:Ki1[indiv]] <- rmultinom(1,z[indiv], p[indiv,1:Ki1[indiv]])
    } else if(d_2[indiv] == 1){
      W[indiv,(Ki1[indiv]+1):Ki2[indiv]] <- rmultinom(1,w[indiv], p[indiv,(Ki1[indiv]+1):Ki2[indiv]])
    }
  }
  
  #sample lambda (jumps)
  for (m in 1:(M-1)) {
    a_lmd <- sum(Z[,m]*(m <= Ki1) + W[,m]*(m > Ki1 & m <=Ki2))  + a*(s[m+1] - s[m])*eta
    b_lmd <- sum(exp(X%*%bt)*phi*ifelse(d_1 == 1 , m <= Ki1, m <=Ki2 ) ) + eta
    lmd[m] <- rgamma(1,a_lmd,b_lmd)
  }
  lmd[lmd == 0] <- 1e-200
  
  #sample beta
  for (h in 1:ncol(X)){
    bt[h]=arms(bt[h],beta_fun, ind_fun, n.sample = 1, j = h, X = X, beta=bt, w = w, z = z, bsl1 = bsl1, bsl2 = bsl2, phi = phi, sig0 = 10)
  }

  #sample  phi
  phi_a <- z + w + 1
  phi_b <- as.vector(exp(X%*%bt))*ifelse(d_1 == 1, bsl1, bsl2 ) + 1
  phi <- rgamma(n,phi_a,phi_b)
  
  #sample a
  a <- arms(a,af,n.sample = 1,indaf,eta,dfs = diff(s[-M]),sM = s[M-1],lmd[-(M-1)])

  #sample eta
  eta <- arms(eta,etaf,n.sample = 1,indetaf,a,dfs = diff(s[-M]),sM = s[M-1],lmd[-(M-1)])

  ite <- ite + 1 
  
  tracking[ite,] <- c(bt,a,eta,lmd)
  
} 

#sample drop first 1000 observations with lag=10
sample <- tracking[(burnin + 1):10000,]
#posterior mean
m <- apply(sample,2,mean)
#credible interval
ci <- quantile(sample[,1],probs = c(0.025,0.975))
#standard deviation
std <- sd(sample[,1])

comb <- c(m[1],ci,std,m[(length(bt)+1):length(m)])

plot(s[-1],cumsum(m[(length(bt)+3):length(m)]), type = "s",xlab = "Time",ylab = "Baseline odds")

samjump <- sample[,(length(bt)+3):length(m)]
samodds <- t(apply(samjump,1,cumsum))

sur <- apply(1/(1 + samodds),2,mean)

sur1 <- apply(1/(1 + samodds*exp(m[1])),2,mean)

hist(sample[,1])   
###################################################################################################################
library(icenReg)
fit_po <- ic_sp(cbind(D[,'left'],D[,"right"])~treatment,model = 'po',bs_samples = 100,data = as.data.frame(D))
newdata <- data.frame(treatment = c("RadChem","Rad"),row.names = c("RadChem","Rad"))
plot(fit_po,newdata,lty=3)

points(s[-1],sur, type = "s",xlab = "Time",ylab = "Baseline survival",col = "red")
points(s[-1],sur1, type = "s",xlab = "Time",ylab = "Baseline survival",col = "black")
fit_po
comb
################## To get the right plot#############################
bs <- data.frame(treatment = c("RadChem","Rad"),row.names = c("RadChem","Rad"))
A <- getSCurves(fit_po,newdata = bs)
plot(A$Tbull_ints[,1],A$S_curves$`Rad`,type = "s",lty = 3,ylab = "Estimated survival function",xlab = "time(month)")
points(s[-1],sur, type = "s",lty = 1)
points(A$Tbull_ints[,1],A$S_curves$`RadChem`,type = "s",lty = 4)
points(s[-1],sur1, type = "s",lty = 2)
legend(5,0.3,legend = c('Rad: GFGP','Rad: SPT','RadChem: GFGP','RadChem: SPT'),lty = c(1,3,2,4),cex = 0.75)
